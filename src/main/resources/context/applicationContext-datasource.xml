<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd   
        http://www.springframework.org/schema/tx  
        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">

	<!-- 注解探测器 -->
	<context:annotation-config />

	<!-- AOP动态切换 -->
	<bean id="dataSourceAspect" class="com.bbtree.framework.db.DataSourceAspect" />
	<aop:config>
		<aop:aspect id="aspect" ref="dataSourceAspect">
			<aop:pointcut id="service"
				expression="execution(* com.bbtree.*.core.service.*.*(..))" />
			<aop:before pointcut-ref="service" method="before" />
			<aop:after pointcut-ref="service" method="doAfter" />
			<aop:around pointcut-ref="service" method="doAround" />
		</aop:aspect>
	</aop:config>

	<!--master -->
	<bean id="masterDateSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.minIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 1分钟-->
		<property name="minEvictableIdleTimeMillis" value="60000" />
		<!-- 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。 -->
		<property name="keepAlive" value="true" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<property name="filters" value="stat,wall" />

	</bean>

	<!--slave -->
	<bean id="slaveDateSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${slave.jdbc.url}" />
		<property name="username" value="${slave.jdbc.username}" />
		<property name="password" value="${slave.jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${slave.jdbc.initialSize}" />
		<property name="minIdle" value="${slave.jdbc.minIdle}" />
		<property name="maxActive" value="${slave.jdbc.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 连接保持空闲而不被驱逐的最小时间 单位是毫秒 1分钟-->
		<property name="minEvictableIdleTimeMillis" value="60000" />
		<!-- 连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。 -->
		<property name="keepAlive" value="true" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<property name="filters" value="stat,wall" />

	</bean>


	<bean id="wall" class="com.alibaba.druid.wall.WallFilter">
		<property name="dbType" value="mysql" />
	</bean>
	<!-- 慢sql 300ms -->
	<bean id="stat" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="300" />
		<property name="logSlowSql" value="true" />
	</bean>


	<bean id="dynamicDataSource" class="com.bbtree.framework.db.DynamicDataSource">
    	<property name="defaultDataSourceName" value="${default.datasource.name}" />
    	<property name="masterDataSourceName" value="${jdbc.datasource.name}" />
    	<property name="slaveDataSourceNames">
    		<list>
    			<value>${slave.jdbc.datasource.name}</value>
    		</list>
    	</property>
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="${jdbc.datasource.name}" value-ref="masterDateSource"/>
                <entry key="${slave.jdbc.datasource.name}" value-ref="slaveDateSource"/>
            </map>
        </property>
    </bean>


	<!-- spring管理事务 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>



	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:context/mybatis/page-plugin.xml"/>
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="mapperLocations">
			<list>
				<value>classpath:mapper/*Mapper.xml</value>
			</list>
		</property>
	</bean>

	<!-- 通过扫描的模式,自动注入bean -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.bbtree.*.core.dao" />
	</bean>


	<!-- Spring的声明式事务管理 -->
	<!-- 设置与事务有关的各种属性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- 声明切入点 -->
	<!-- 自动创建事务代理 -->
	<aop:config>
		<aop:pointcut id="interceptorPointCuts"
			expression="execution(* com.bbtree.*.core.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
	</aop:config>


	<!-- 启用对事务注解的支持 -->
	<tx:annotation-driven transaction-manager="txManager" />



	<!-- druid 监控 -->
	<bean id="druid-stat-interceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
		scope="prototype">
		<property name="patterns">
			<list>
				<value>com.bbtree.*.core.service.impl.*</value>
				<value>com.bbtree.*.core.dao.*</value>
			</list>
		</property>
	</bean>

	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="druid-stat-interceptor"
			pointcut-ref="druid-stat-pointcut" />
	</aop:config>

</beans>
